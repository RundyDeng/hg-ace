package com.jeefw.controller.dataAnalysis;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.jeefw.controller.IbaseController;
import com.jeefw.dao.IBaseDao;

@Controller
@RequestMapping("/dataAnalysis/statisticContr")
public class StatisticController extends IbaseController{
	private int pagesize = 20;
	@Resource
	private IBaseDao baseDao;
	
	@RequestMapping("/getStatistic")
	public void getStatistic(HttpServletRequest request,HttpServletResponse response) throws IOException{
		Map<String, Object> map = new HashMap<String, Object>() ;
		String date = getParm("date");
		String areaName = getParm("areaname");
		boolean flag = false;
		// 各小区表信息统计
		String eachAreaMeterInfoSql = "select t.*,a.areaname,b.SECTIONID,b.SECTIONNAME,c.FACTORYID,c.FACTORYNAME "
									+" from Tarea a "
									+" left join FACTORYSECTIONINFO b "
									+" on a.FACTORYNO=b.SECTIONID "
									+" left join ENERGYFACTORY c "
									+" on c.FACTORYID=b.FACTORYID "
									+" inner join TGZTJ t "
									+" on t.areaguid=a.areaguid "
									+" where 1=1 ";
		
		if(StringUtils.isNotBlank(date)){
			eachAreaMeterInfoSql += " and t.ddate>to_date('" + date + "','yyyy-mm-dd hh24:mi:ss') and t.ddate<to_date('" + date + " 23:59:59','yyyy-mm-dd hh24:mi:ss')  ";
			flag = true;
		}
		if(StringUtils.isNotBlank(areaName)&&!"null".equals(areaName)){
			eachAreaMeterInfoSql += " and a.areaname='"+areaName+"' ";
			flag = true;
		}
		eachAreaMeterInfoSql+=" order by NLSSORT(AREANAME, 'NLS_SORT=SCHINESE_PINYIN_M')";
		if(flag!=true){
			
		}
		int page = 0;
		if(StringUtils.isBlank(getParm("page")))
			page = 1;
		else
			page = Integer.valueOf(getParm("page"));
		List eachAreaMeterInfo = baseDao.listSqlPageAndChangeToMap(eachAreaMeterInfoSql, page, pagesize, null);
		long total = baseDao.countSql(eachAreaMeterInfoSql);
		long pageNumber = (total + pagesize - 1)/pagesize;
		map.put("data", eachAreaMeterInfo);
		map.put("pageCount", pageNumber);
		writeJSON(response, map);

	}
	
	@RequestMapping("/updateStatistic")
	public void updateStatistic(HttpServletRequest request,HttpServletResponse response){
		
	}
}
